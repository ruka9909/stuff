From 90eb3c9312c9312315057ad21690ec4b8cbffff9 Mon Sep 17 00:00:00 2001
From: Gagan Malvi <malvigagan@gmail.com>
Date: Wed, 24 Aug 2022 15:58:22 +0000
Subject: [PATCH] inputflinger: Implement touch boost.

Signed-off-by: Gagan Malvi <malvigagan@gmail.com>
Change-Id: I57d0eb9745cc6cda14203b625fa4ddaa6825b83e
---
 .../dispatcher/InputDispatcher.cpp            | 31 +++++++++++++++++++
 1 file changed, 31 insertions(+)

diff --git a/services/inputflinger/dispatcher/InputDispatcher.cpp b/services/inputflinger/dispatcher/InputDispatcher.cpp
index 5e9427ad87..bde25a4a77 100644
--- a/services/inputflinger/dispatcher/InputDispatcher.cpp
+++ b/services/inputflinger/dispatcher/InputDispatcher.cpp
@@ -43,6 +43,8 @@
 #include "DebugConfig.h"
 #include "InputDispatcher.h"
 
+#include <dlfcn.h>
+
 #define INDENT "  "
 #define INDENT2 "    "
 #define INDENT3 "      "
@@ -107,6 +109,12 @@ constexpr int LOGTAG_INPUT_INTERACTION = 62000;
 constexpr int LOGTAG_INPUT_FOCUS = 62001;
 constexpr int LOGTAG_INPUT_CANCEL = 62003;
 
+#define POWERHAL_LIB_NAME "libpowerhalwrap.so"
+
+int (*powerTouchBoost)(int) = NULL;
+typedef int (*boost)(int);
+void *pwr_handle = NULL;
+
 inline nsecs_t now() {
     return systemTime(SYSTEM_TIME_MONOTONIC);
 }
@@ -555,6 +563,15 @@ InputDispatcher::InputDispatcher(const sp<InputDispatcherPolicyInterface>& polic
         mStaleEventTimeout(staleEventTimeout),
         mLatencyAggregator(),
         mLatencyTracker(&mLatencyAggregator) {
+    void *func;
+    pwr_handle = dlopen(POWERHAL_LIB_NAME, RTLD_NOW);
+    if (pwr_handle != NULL) {
+        func = dlsym(pwr_handle, "PowerHal_TouchBoost");
+        powerTouchBoost = reinterpret_cast<boost>(func);
+        if (powerTouchBoost == NULL) {
+            ALOGE("PowerHal_TouchBoost init fail!");
+        }
+    }
     mLooper = new Looper(false);
     mReporter = createInputReporter();
 
@@ -1028,6 +1045,20 @@ bool InputDispatcher::enqueueInboundEventLocked(std::unique_ptr<EventEntry> newE
                 mNextUnblockedEvent = mInboundQueue.back();
                 needWake = true;
             }
+            MotionEntry& motionEntry = static_cast<MotionEntry&>(entry);
+            switch (motionEntry.action) {
+                case AMOTION_EVENT_ACTION_DOWN: {
+                    if (powerTouchBoost)
+                        powerTouchBoost(1); // enable boost
+                    break;
+                }
+                case AMOTION_EVENT_ACTION_UP:
+                case AMOTION_EVENT_ACTION_CANCEL: {
+                    if (powerTouchBoost)
+                        powerTouchBoost(0); // disable boost
+                    break;
+                }
+            }
             break;
         }
         case EventEntry::Type::FOCUS: {
